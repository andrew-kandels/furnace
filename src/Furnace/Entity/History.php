<?php
namespace Furnace\Entity;

use Contain\Entity\AbstractEntity;
use Contain\Entity\Property\Property;

/**
 * History Entity (auto-generated by the Contain module)
 *
 * This instance should not be edited directly. Edit the definition file instead
 * and recompile.
 */
class History extends AbstractEntity
{

    protected $inputFilter = 'Furnace\Entity\Form\History';
    protected $messages = array();

    /**
     * Initializes the properties of this entity.
     *
     * @return  $this
     */
    public function init()
    {
        $this->define('startedAt', 'dateTime', array (
  'dateFormat' => 'Y-m-d H:i:s',
));
        $this->define('completedAt', 'dateTime', array (
  'dateFormat' => 'Y-m-d H:i:s',
));
        $this->define('failedAt', 'dateTime', array (
  'dateFormat' => 'Y-m-d H:i:s',
));
        $this->define('message', 'string');
        $this->define('stats', 'hash');
        $this->define('notes', 'string', array (
  'filters' => 
  array (
    0 => 
    array (
      'name' => 'StringTrim',
    ),
    1 => 
    array (
      'name' => 'StripTags',
    ),
  ),
  'type' => 'textarea',
  'attributes' => 
  array (
    'class' => 'input-xlarge',
    'rows' => 60,
  ),
  'options' => 
  array (
    'label' => 'Notes',
  ),
));
            }


    /**
     * Accessor getter for the startedAt property
     *
     * @return  See: Contain\Entity\Property\Type\DateTimeType::getValue()
     */
    public function getStartedAt()
    {
        return $this->get('startedAt');
    }

    /**
     * Accessor setter for the startedAt property
     *
     * @param   See: Contain\Entity\Property\Type\DateTimeType::parse()
     * @return  $this
     */
    public function setStartedAt($value)
    {
        return $this->set('startedAt', $value);
    }

    /**
     * Accessor existence checker for the startedAt property
     *
     * @return  boolean
     */
    public function hasStartedAt()
    {
        $property = $this->property('startedAt');
        return !($property->isUnset() || $property->isEmpty());
    }

    /**
     * Accessor getter for the completedAt property
     *
     * @return  See: Contain\Entity\Property\Type\DateTimeType::getValue()
     */
    public function getCompletedAt()
    {
        return $this->get('completedAt');
    }

    /**
     * Accessor setter for the completedAt property
     *
     * @param   See: Contain\Entity\Property\Type\DateTimeType::parse()
     * @return  $this
     */
    public function setCompletedAt($value)
    {
        return $this->set('completedAt', $value);
    }

    /**
     * Accessor existence checker for the completedAt property
     *
     * @return  boolean
     */
    public function hasCompletedAt()
    {
        $property = $this->property('completedAt');
        return !($property->isUnset() || $property->isEmpty());
    }

    /**
     * Accessor getter for the failedAt property
     *
     * @return  See: Contain\Entity\Property\Type\DateTimeType::getValue()
     */
    public function getFailedAt()
    {
        return $this->get('failedAt');
    }

    /**
     * Accessor setter for the failedAt property
     *
     * @param   See: Contain\Entity\Property\Type\DateTimeType::parse()
     * @return  $this
     */
    public function setFailedAt($value)
    {
        return $this->set('failedAt', $value);
    }

    /**
     * Accessor existence checker for the failedAt property
     *
     * @return  boolean
     */
    public function hasFailedAt()
    {
        $property = $this->property('failedAt');
        return !($property->isUnset() || $property->isEmpty());
    }

    /**
     * Accessor getter for the message property
     *
     * @return  See: Contain\Entity\Property\Type\StringType::getValue()
     */
    public function getMessage()
    {
        return $this->get('message');
    }

    /**
     * Accessor setter for the message property
     *
     * @param   See: Contain\Entity\Property\Type\StringType::parse()
     * @return  $this
     */
    public function setMessage($value)
    {
        return $this->set('message', $value);
    }

    /**
     * Accessor existence checker for the message property
     *
     * @return  boolean
     */
    public function hasMessage()
    {
        $property = $this->property('message');
        return !($property->isUnset() || $property->isEmpty());
    }
    /**
     * Searches for a value and returns its index or FALSE if not found.
     *
     * @param   mixed                           Value to search for
     * @param   boolean                         Strict type checking
     * @return  integer|false
     */
    public function indexOfStats($value, $strict = false)
    {
        return $this->indexOf('stats', $value, $strict);
    }

    /**
     * Sets a value for a list item at a given index.
     *
     * @param   string                          Property name
     * @param   integer                         Index
     * @return  mixed|null                      Value or null if unset
     */
    public function putStats($index)
    {
        return $this->put('stats', $index);
    }

    /**
     * Fetches a list item by its numerical index position.
     *
     * @param   string                          Property name
     * @param   integer                         Index
     * @return  mixed|null                      Value or null if unset
     */
    public function atStats($index)
    {
        return $this->at('stats', $index);
    }


    /**
     * Accessor getter for the stats property
     *
     * @return  See: Contain\Entity\Property\Type\HashType::getValue()
     */
    public function getStats()
    {
        return $this->get('stats');
    }

    /**
     * Accessor setter for the stats property
     *
     * @param   See: Contain\Entity\Property\Type\HashType::parse()
     * @return  $this
     */
    public function setStats($value)
    {
        return $this->set('stats', $value);
    }

    /**
     * Accessor existence checker for the stats property
     *
     * @return  boolean
     */
    public function hasStats()
    {
        $property = $this->property('stats');
        return !($property->isUnset() || $property->isEmpty());
    }

    /**
     * Accessor getter for the notes property
     *
     * @return  See: Contain\Entity\Property\Type\StringType::getValue()
     */
    public function getNotes()
    {
        return $this->get('notes');
    }

    /**
     * Accessor setter for the notes property
     *
     * @param   See: Contain\Entity\Property\Type\StringType::parse()
     * @return  $this
     */
    public function setNotes($value)
    {
        return $this->set('notes', $value);
    }

    /**
     * Accessor existence checker for the notes property
     *
     * @return  boolean
     */
    public function hasNotes()
    {
        $property = $this->property('notes');
        return !($property->isUnset() || $property->isEmpty());
    }

}
